From net-tools-cvscommit at lists.berlios.de  Wed Sep 27 22:59:52 2006
From: net-tools-cvscommit at lists.berlios.de (CVS Commits for net-tools project)
Date: Wed, 27 Sep 2006 22:59:52 +0200 (CEST)
Subject: [net-tools-cvscommit] net-tools mii-tool.c,1.8,1.9
Message-ID: <20060927205952.344417DD19@bat.berlios.de>

Update of /cvsroot/net-tools/net-tools
In directory sheep:/tmp/cvs-serv5532

Modified Files:
	mii-tool.c 
Log Message:
GigE Support by Stephen Hemminger from 
http://developer.osdl.org/shemminger/prototypes/mii-tool.tar.bz2
with verbose register patch from Dean Gaudet


Index: mii-tool.c
===================================================================
RCS file: /cvsroot/net-tools/net-tools/mii-tool.c,v
retrieving revision 1.8
retrieving revision 1.9
diff -C2 -d -r1.8 -r1.9
*** mii-tool.c	3 Jun 2004 22:18:26 -0000	1.8
--- mii-tool.c	27 Sep 2006 20:59:18 -0000	1.9
***************
*** 30,34 ****
  */
  
! static char version[] = "$Id$\n(Author: David Hinds based on Donald Becker's mii-diag)";
  
  #include <unistd.h>
--- 30,34 ----
  */
  
! static char Version[] = "$Id$\n(Author: David Hinds based on Donald Becker's mii-diag)";
  
  #include <unistd.h>
***************
*** 46,49 ****
--- 46,51 ----
  #include <sys/ioctl.h>
  #include <net/if.h>
+ #include <linux/sockios.h>
+ 
  #ifndef __GLIBC__
  #include <linux/if_arp.h>
***************
*** 56,60 ****
  
  /* Table of known MII's */
! static struct {
      u_short	id1, id2;
      char	*name;
--- 58,62 ----
  
  /* Table of known MII's */
! static const struct {
      u_short	id1, id2;
      char	*name;
***************
*** 75,78 ****
--- 77,83 ----
      { 0x0282, 0x1c50, "SMSC 83C180" },
      { 0x0300, 0xe540, "TDK 78Q2120" },
+     { 0x0141, 0x0c20, "Yukon 88E1011" },
+     { 0x0141, 0x0cc0, "Yukon-EC 88E1111" },
+     { 0x0141, 0x0c90, "Yukon-2 88E1112" },
  };
  #define NMII (sizeof(mii_id)/sizeof(mii_id[0]))
***************
*** 138,156 ****
  const struct {
      char	*name;
!     u_short	value;
  } media[] = {
      /* The order through 100baseT4 matches bits in the BMSR */
!     { "10baseT-HD",	MII_AN_10BASET_HD },
!     { "10baseT-FD",	MII_AN_10BASET_FD },
!     { "100baseTx-HD",	MII_AN_100BASETX_HD },
!     { "100baseTx-FD",	MII_AN_100BASETX_FD },
!     { "100baseT4",	MII_AN_100BASET4 },
!     { "100baseTx",	MII_AN_100BASETX_FD | MII_AN_100BASETX_HD },
!     { "10baseT",	MII_AN_10BASET_FD | MII_AN_10BASET_HD },
  };
  #define NMEDIA (sizeof(media)/sizeof(media[0]))
  	
  /* Parse an argument list of media types */
! static int parse_media(char *arg)
  {
      int mask, i;
--- 143,165 ----
  const struct {
      char	*name;
!     u_short	value[2];
  } media[] = {
      /* The order through 100baseT4 matches bits in the BMSR */
!     { "10baseT-HD",	{MII_AN_10BASET_HD} },
!     { "10baseT-FD",	{MII_AN_10BASET_FD} },
!     { "100baseTx-HD",	{MII_AN_100BASETX_HD} },
!     { "100baseTx-FD",	{MII_AN_100BASETX_FD} },
!     { "100baseT4",	{MII_AN_100BASET4} },
!     { "100baseTx",	{MII_AN_100BASETX_FD | MII_AN_100BASETX_HD} },
!     { "10baseT",	{MII_AN_10BASET_FD | MII_AN_10BASET_HD} },
! 
!     { "1000baseT-HD",	{0, MII_BMCR2_1000HALF} },
!     { "1000baseT-FD",	{0, MII_BMCR2_1000FULL} },
!     { "1000baseT",	{0, MII_BMCR2_1000HALF|MII_BMCR2_1000FULL} },
  };
  #define NMEDIA (sizeof(media)/sizeof(media[0]))
  	
  /* Parse an argument list of media types */
! static int parse_media(char *arg, unsigned *bmcr2)
  {
      int mask, i;
***************
*** 159,175 ****
      if ((*arg != '\0') && (*s == '\0')) {
  	if ((mask & MII_AN_ABILITY_MASK) &&
! 	    !(mask & ~MII_AN_ABILITY_MASK))
! 	    return mask;
  	goto failed;
!     } else {
! 	mask = 0;
! 	s = strtok(arg, ", ");
! 	do {
  	    for (i = 0; i < NMEDIA; i++)
  		if (s && strcasecmp(media[i].name, s) == 0) break;
  	    if (i == NMEDIA) goto failed;
! 	    mask |= media[i].value;
! 	} while ((s = strtok(NULL, ", ")) != NULL);
!     }
      return mask;
  failed:
--- 168,188 ----
      if ((*arg != '\0') && (*s == '\0')) {
  	if ((mask & MII_AN_ABILITY_MASK) &&
! 	    !(mask & ~MII_AN_ABILITY_MASK)) {
! 		*bmcr2 = 0;
! 		return mask;
! 	}
  	goto failed;
!     }
!     mask = 0;
!     *bmcr2 = 0;
!     s = strtok(arg, ", ");
!     do {
  	    for (i = 0; i < NMEDIA; i++)
  		if (s && strcasecmp(media[i].name, s) == 0) break;
  	    if (i == NMEDIA) goto failed;
! 	    mask |= media[i].value[0];
! 	    *bmcr2 |= media[i].value[1];
!     } while ((s = strtok(NULL, ", ")) != NULL);
! 
      return mask;
  failed:
***************
*** 180,188 ****
  /*--------------------------------------------------------------------*/
  
! static char *media_list(int mask, int best)
  {
      static char buf[100];
      int i;
      *buf = '\0';
      mask >>= 5;
      for (i = 4; i >= 0; i--) {
--- 193,214 ----
  /*--------------------------------------------------------------------*/
  
! static const char *media_list(unsigned mask, unsigned mask2, int best)
  {
      static char buf[100];
      int i;
      *buf = '\0';
+ 
+     if (mask & MII_BMCR_SPEED1000) {
+ 	if (mask2 & MII_BMCR2_1000HALF) {
+ 	    strcat(buf, " ");
+ 	    strcat(buf, "1000baseT-HD");
+ 	    if (best) goto out;
+ 	}
+ 	if (mask2 & MII_BMCR2_1000FULL) {
+ 	    strcat(buf, " ");
+ 	    strcat(buf, "1000baseT-FD");
+ 	    if (best) goto out;
+ 	}
+     }
      mask >>= 5;
      for (i = 4; i >= 0; i--) {
***************
*** 193,196 ****
--- 219,223 ----
  	}
      }
+  out:
      if (mask & (1<<5))
  	strcat(buf, " flow-control");
***************
*** 202,213 ****
      char buf[100];
      int i, mii_val[32];
!     int bmcr, bmsr, advert, lkpar;
  
      /* Some bits in the BMSR are latched, but we can't rely on being
         the only reader, so only the current values are meaningful */
      mdio_read(sock, MII_BMSR);
!     for (i = 0; i < ((verbose > 1) ? 32 : 8); i++)
  	mii_val[i] = mdio_read(sock, i);
!     
      if (mii_val[MII_BMCR] == 0xffff  || mii_val[MII_BMSR] == 0x0000) {
  	fprintf(stderr, "  No MII transceiver present!.\n");
--- 229,240 ----
      char buf[100];
      int i, mii_val[32];
!     unsigned bmcr, bmsr, advert, lkpar, bmcr2, lpa2;
  
      /* Some bits in the BMSR are latched, but we can't rely on being
         the only reader, so only the current values are meaningful */
      mdio_read(sock, MII_BMSR);
!     for (i = 0; i < ((verbose > 1) ? 32 : MII_BASIC_MAX); i++)
  	mii_val[i] = mdio_read(sock, i);
! 
      if (mii_val[MII_BMCR] == 0xffff  || mii_val[MII_BMSR] == 0x0000) {
  	fprintf(stderr, "  No MII transceiver present!.\n");
***************
*** 218,221 ****
--- 245,249 ----
      bmcr = mii_val[MII_BMCR]; bmsr = mii_val[MII_BMSR];
      advert = mii_val[MII_ANAR]; lkpar = mii_val[MII_ANLPAR];
+     bmcr2 = mii_val[MII_CTRL1000]; lpa2 = mii_val[MII_STAT1000];
  
      sprintf(buf, "%s: ", ifr.ifr_name);
***************
*** 225,229 ****
  		strcat(buf, (lkpar & MII_AN_ACK) ?
  		       "negotiated" : "no autonegotiation,");
! 		strcat(buf, media_list(advert & lkpar, 1));
  		strcat(buf, ", ");
  	    } else {
--- 253,257 ----
  		strcat(buf, (lkpar & MII_AN_ACK) ?
  		       "negotiated" : "no autonegotiation,");
! 		strcat(buf, media_list(advert & lkpar, bmcr2 & lpa2>>2, 1));
  		strcat(buf, ", ");
  	    } else {
***************
*** 235,240 ****
      } else {
  	sprintf(buf+strlen(buf), "%s Mbit, %s duplex, ",
! 	       (bmcr & MII_BMCR_100MBIT) ? "100" : "10",
! 	       (bmcr & MII_BMCR_DUPLEX) ? "full" : "half");
      }
      strcat(buf, (bmsr & MII_BMSR_LINK_VALID) ? "link ok" : "no link");
--- 263,270 ----
      } else {
  	sprintf(buf+strlen(buf), "%s Mbit, %s duplex, ",
! 		((bmcr2 & (MII_BMCR2_1000HALF | MII_BMCR2_1000FULL)) & lpa2 >> 2)
! 		? "1000"
! 		: (bmcr & MII_BMCR_100MBIT) ? "100" : "10",
! 		(bmcr & MII_BMCR_DUPLEX) ? "full" : "half");
      }
      strcat(buf, (bmsr & MII_BMSR_LINK_VALID) ? "link ok" : "no link");
***************
*** 297,304 ****
  	    printf("remote fault, ");
  	printf((bmsr & MII_BMSR_LINK_VALID) ? "link ok" : "no link");
! 	printf("\n  capabilities:%s", media_list(bmsr >> 6, 0));
! 	printf("\n  advertising: %s", media_list(advert, 0));
  	if (lkpar & MII_AN_ABILITY_MASK)
! 	    printf("\n  link partner:%s", media_list(lkpar, 0));
  	printf("\n");
      }
--- 327,334 ----
  	    printf("remote fault, ");
  	printf((bmsr & MII_BMSR_LINK_VALID) ? "link ok" : "no link");
! 	printf("\n  capabilities:%s", media_list(bmsr >> 6, bmcr2, 0));
! 	printf("\n  advertising: %s", media_list(advert, lpa2 >> 2, 0));
  	if (lkpar & MII_AN_ABILITY_MASK)
! 	    printf("\n  link partner:%s", media_list(lkpar, bmcr2, 0));
  	printf("\n");
      }
***************
*** 380,384 ****
  /*--------------------------------------------------------------------*/
  
! const char *usage = "usage: %s [-VvRrwl] [-A media,... | -F media] [interface ...]\n"
  "       -V, --version               display version information\n"
  "       -v, --verbose               more verbose output\n"
--- 410,415 ----
  /*--------------------------------------------------------------------*/
  
! const char *usage =
! "usage: %s [-VvRrwl] [-A media,... | -F media] [interface ...]\n"
  "       -V, --version               display version information\n"
  "       -v, --verbose               more verbose output\n"
***************
*** 389,394 ****
  "       -A, --advertise=media,...   advertise only specified media\n"
  "       -F, --force=media           force specified media technology\n"
! "media: 100baseT4, 100baseTx-FD, 100baseTx-HD, 10baseT-FD, 10baseT-HD,\n"
! "       (to advertise both HD and FD) 100baseTx, 10baseT\n";
  
  int main(int argc, char **argv)
--- 420,435 ----
  "       -A, --advertise=media,...   advertise only specified media\n"
  "       -F, --force=media           force specified media technology\n"
! "media: 1000baseTx-HD, 1000baseTx-FD,\n"
! "       100baseT4, 100baseTx-FD, 100baseTx-HD,\n"
! "       10baseT-FD, 10baseT-HD,\n"
! "       (to advertise both HD and FD) 1000baseTx, 100baseTx, 10baseT\n";
! 
! 
! static void version(void)
! {
!     fprintf(stderr, "%s\n%s\n", Version, RELEASE);
!     exit(5); /* E_VERSION */
! }
! 
  
  int main(int argc, char **argv)
***************
*** 396,404 ****
      int i, c, ret, errflag = 0;
      char s[6];
      
      while ((c = getopt_long(argc, argv, "A:F:p:lrRvVw?", longopts, 0)) != EOF)
  	switch (c) {
! 	case 'A': nway_advertise = parse_media(optarg); break;
! 	case 'F': fixed_speed = parse_media(optarg); break;
  	case 'p': override_phy = atoi(optarg); break;
  	case 'r': opt_restart++;	break;
--- 437,446 ----
      int i, c, ret, errflag = 0;
      char s[6];
+     unsigned ctrl1000 = 0;
      
      while ((c = getopt_long(argc, argv, "A:F:p:lrRvVw?", longopts, 0)) != EOF)
  	switch (c) {
! 	case 'A': nway_advertise = parse_media(optarg, &ctrl1000); break;
! 	case 'F': fixed_speed = parse_media(optarg, &ctrl1000); break;
  	case 'p': override_phy = atoi(optarg); break;
  	case 'r': opt_restart++;	break;
***************
*** 423,427 ****
  
      if (opt_version)
! 	printf("%s\n%s\n", version, RELEASE);
  
      /* Open a basic socket. */
--- 465,469 ----
  
      if (opt_version)
! 	version();
  
      /* Open a basic socket. */
***************
*** 430,434 ****
  	exit(-1);
      }
!     
      if (verbose > 1)
      	printf("Using SIOCGMIIPHY=0x%x\n", SIOCGMIIPHY);	
--- 472,476 ----
  	exit(-1);
      }
! 
      if (verbose > 1)
      	printf("Using SIOCGMIIPHY=0x%x\n", SIOCGMIIPHY);	



From net-tools-cvscommit at lists.berlios.de  Wed Sep 27 22:59:52 2006
From: net-tools-cvscommit at lists.berlios.de (CVS Commits for net-tools project)
Date: Wed, 27 Sep 2006 22:59:52 +0200 (CEST)
Subject: [net-tools-cvscommit] net-tools/include mii.h,1.2,1.3
Message-ID: <20060927205952.8449383527@bat.berlios.de>

Update of /cvsroot/net-tools/net-tools/include
In directory sheep:/tmp/cvs-serv5532/include

Modified Files:
	mii.h 
Log Message:
GigE Support by Stephen Hemminger from 
http://developer.osdl.org/shemminger/prototypes/mii-tool.tar.bz2
with verbose register patch from Dean Gaudet


Index: mii.h
===================================================================
RCS file: /cvsroot/net-tools/net-tools/include/mii.h,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** mii.h	28 Jun 2003 03:19:04 -0000	1.2
--- mii.h	27 Sep 2006 20:59:19 -0000	1.3
***************
*** 42,45 ****
--- 42,46 ----
  #define  MII_BMCR_DUPLEX	0x0100
  #define  MII_BMCR_COLTEST	0x0080
+ #define  MII_BMCR_SPEED1000	0x0040
  
  /* Basic Mode Status Register */
***************
*** 86,89 ****
--- 87,103 ----
  #define  MII_ANER_PAGE_RX	0x0002
  #define  MII_ANER_LP_AN_ABLE	0x0001
+ 
+ #define MII_CTRL1000		0x09
+ #define   MII_BMCR2_1000FULL	0x0200
+ #define   MII_BMCR2_1000HALF	0x0100
+ 
+ #define MII_STAT1000		0x0a
+ #define   MII_LPA2_1000LOCALOK  0x2000
+ #define   MII_LPA2_1000REMRXOK	0x1000
+ #define   MII_LPA2_1000FULL	0x0800
+ #define   MII_LPA2_1000HALF	0x0400
+ 
+ /* Last register we need for show_basic_mii() */
+ #define MII_BASIC_MAX          (MII_STAT1000+1)
  
  #endif /* _NETTOOLS_MII_H */



